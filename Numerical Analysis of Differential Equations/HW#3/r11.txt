function [Hist,x,U] = bvpqgs(m, xL, xR, q, f, alpha, beta, x0, N)
% This function uses a centered finite difference scheme to solve 
% the following boundary value problem:
% 
%   u''(x) + qu(x) = f(x), u(x_L) = \alpha, u(x_R) = \beta
%
% Using m + 2 point grid and the following finite difference approx.
%
%    D^2U_j = 1/h^2(U_{j - 1} -2U_j +U_{j + 1})
%
% This function also solves the Linear System AU = F via 
% Gauss-Seidel iteration, so the user must pass an initial iterate x0
% and a number of iterations. 



x = linspace(xL, xR, m+2); % Generating grid 
h = (xR - xL)/(m - 1); % Grid spacing
% Generating A 
A = (1/h^2).*(
    diag(((q*h^2 - 2)*ones(m, 1))) + 
        diag(ones(m - 1, 1), 1) + 
        diag(ones(m - 1, 1), -1)
        );
% Generating F
F = f(x(2:m+1))';
F(1) = F(1) - alpha/h^2;
F(m) = F(m) - beta/h^2;



% Solving U
[Hist, U] = gs(A, F, x0, N);
U = [alpha; U; beta];
Hist = [alpha*ones(N+1, 1) Hist beta*ones(N+1, 1)]

end



function [Hist, z] = gs(A, b, x0, N)
% This function takes in a system Az = b
% an initial iterate x0 and a number of
% iterations N and performs Gauss-Seidel iteration, 
% using 

z = x0;
Hist = z';
[m, n] = size(A);

for i = 1:N
    % Building next iterate with Gauss-Seidel iteration
    for j = 1:n
        % Trick for saving memory is 
        % inplace solving of next iterate with A(j,1:j-1)*z(1:j-1)
        z(j) =(b(j) - A(j,1:j-1)*z(1:j-1) - A(j,j+1:n)*z(j+1:n))/A(j,j);
    end
    % Store the updated solution in the history matrix
    Hist = [Hist; z'];
    
end
end